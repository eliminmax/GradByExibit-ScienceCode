#include <Wire.h>
#include <SPI.h>
#include <stdlib.h>
#include <Adafruit_PN532.h>
// If using the breakout or shield with I2C, define just the pins connected
// to the IRQ and reset lines.  Use the values below (2, 3) for the shield!
#define PN532_IRQ   (2)
#define PN532_RESET (3)  // Not connected by default on the NFC Shield

int8_t blocksToWrite[32] = {4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45};//Sectors to write to
uint8_t cardData[32][16] =
{ {0xff, 0x2d, 0x26, 0x2b, 0xfa, 0x10, 0x99, 0x0c, 0x14, 0x2c, 0x5a, 0x58, 0x4a, 0xf6, 0xd6, 0x8b},//Data to write (512 bytes of random noise from random.org)
  {0x3b, 0x88, 0x3e, 0x0d, 0x30, 0x6d, 0xdd, 0x13, 0x18, 0x5b, 0x6b, 0xe9, 0x26, 0xfa, 0xab, 0x01},
  {0x8a, 0x24, 0x12, 0x4c, 0xae, 0x67, 0xdb, 0xb2, 0xf4, 0x51, 0xfc, 0xfe, 0xad, 0x91, 0x71, 0xec},
  {0xba, 0x84, 0x53, 0x0d, 0xfe, 0x0d, 0x16, 0x4c, 0x3d, 0xed, 0x6f, 0xbd, 0x4d, 0xa1, 0x21, 0x83},
  {0x83, 0x09, 0xba, 0xfe, 0x87, 0x1c, 0xea, 0xf1, 0xe2, 0x52, 0xb2, 0x17, 0x51, 0xa3, 0xa0, 0x93},
  {0x72, 0x95, 0x72, 0x4e, 0x63, 0xb3, 0x8f, 0xb1, 0x98, 0x52, 0x8c, 0x64, 0x49, 0x24, 0xfb, 0xe3},
  {0x76, 0x65, 0xbe, 0x66, 0x9e, 0x21, 0x5b, 0xc2, 0x4d, 0x86, 0x32, 0x6b, 0xe4, 0x07, 0x0b, 0x5b},
  {0x06, 0x06, 0x24, 0x7f, 0x55, 0x50, 0x62, 0xe8, 0xc6, 0x6b, 0x95, 0xb1, 0x32, 0x57, 0x82, 0x17},
  {0xb0, 0x7c, 0xac, 0xb3, 0xa3, 0x1c, 0x07, 0x8a, 0x6d, 0xe9, 0x9a, 0x25, 0xe5, 0xef, 0x4b, 0x68},
  {0x1a, 0x61, 0xad, 0xc0, 0x19, 0xdb, 0xb3, 0x21, 0xf4, 0x3b, 0x7a, 0xa6, 0x5a, 0x72, 0x02, 0xb6},
  {0xc6, 0xa9, 0x79, 0xd6, 0x74, 0x35, 0x59, 0xc5, 0x6b, 0x90, 0x63, 0xe7, 0x28, 0x15, 0xe4, 0x76},
  {0x59, 0xa4, 0x98, 0x75, 0xe8, 0xa0, 0x93, 0x94, 0x0a, 0xc9, 0x77, 0xa2, 0x8a, 0x12, 0x2d, 0x6e},
  {0x39, 0x4a, 0x80, 0xcd, 0x96, 0x93, 0xbc, 0x09, 0xbf, 0x16, 0x77, 0x97, 0xc3, 0xe1, 0x8a, 0x49},
  {0x74, 0xb5, 0xa4, 0xe5, 0xf6, 0x21, 0x87, 0xc5, 0x78, 0xb4, 0x33, 0x75, 0x52, 0x1f, 0x24, 0x71},
  {0xf3, 0xaf, 0x24, 0xd8, 0x9f, 0x37, 0x86, 0xce, 0x9b, 0xb9, 0xc4, 0xa5, 0x6a, 0x8a, 0x01, 0xd4},
  {0x8e, 0x32, 0x70, 0xad, 0x90, 0xe8, 0x15, 0x1b, 0x9f, 0x2e, 0x59, 0xf2, 0x23, 0xb9, 0x8e, 0x76},
  {0xa4, 0x4c, 0xa0, 0xbc, 0x8c, 0xe9, 0xdc, 0x8e, 0x20, 0xbf, 0x6d, 0x26, 0x7d, 0xed, 0x8c, 0x6d},
  {0x92, 0xfa, 0x6e, 0x01, 0xcf, 0xb7, 0xd1, 0xa8, 0x54, 0x82, 0x77, 0x70, 0x27, 0xb7, 0x8c, 0x41},
  {0x50, 0x9d, 0xd9, 0xfa, 0x06, 0xc0, 0x31, 0x25, 0xf9, 0xd3, 0xed, 0x92, 0x3e, 0x06, 0x87, 0x5e},
  {0x63, 0x9c, 0xf9, 0xb5, 0x54, 0xd8, 0xf2, 0xc0, 0xa0, 0x0b, 0xe6, 0xae, 0xe2, 0x58, 0x03, 0xe7},
  {0xa3, 0xcf, 0x24, 0x62, 0xe7, 0xf3, 0x9c, 0x37, 0xf4, 0x19, 0xe8, 0xfd, 0x03, 0x44, 0x52, 0x84},
  {0x25, 0x53, 0xd0, 0x7d, 0x98, 0xf8, 0x1d, 0xad, 0xf9, 0xeb, 0x13, 0x3f, 0xef, 0xf9, 0xcd, 0x0f},
  {0xd1, 0xe5, 0x44, 0x1d, 0x98, 0x4f, 0x39, 0x00, 0x7d, 0xf5, 0xb6, 0x11, 0x87, 0x1d, 0xc1, 0x4f},
  {0x62, 0x50, 0xc2, 0x69, 0x28, 0x14, 0x68, 0xa5, 0xeb, 0x5e, 0x8b, 0x6e, 0x88, 0x6b, 0x15, 0xe9},
  {0xb4, 0x26, 0x56, 0x07, 0xc6, 0x43, 0x7a, 0x52, 0x48, 0x2e, 0x7d, 0xba, 0x33, 0xa9, 0x97, 0x76},
  {0x83, 0xee, 0x46, 0xee, 0xd6, 0x9b, 0xbe, 0xc3, 0xdd, 0x04, 0xb8, 0x40, 0xb9, 0x4c, 0x77, 0x3a},
  {0xd4, 0xf1, 0x9e, 0x8d, 0xfb, 0xc9, 0x1a, 0xe4, 0xe1, 0x1c, 0x71, 0x78, 0x15, 0x5a, 0x88, 0xf1},
  {0xf4, 0x74, 0x3d, 0x3f, 0x46, 0x80, 0xe6, 0xad, 0xb0, 0xf3, 0x25, 0x43, 0x58, 0x1e, 0x7c, 0xb9},
  {0xfa, 0x20, 0x26, 0x67, 0x20, 0xbe, 0x48, 0x50, 0xc0, 0x16, 0xac, 0x95, 0x29, 0x24, 0x8c, 0x6a},
  {0xa8, 0x82, 0x99, 0x97, 0xd1, 0x13, 0x06, 0xae, 0xce, 0x58, 0x8c, 0xdd, 0x8d, 0xb1, 0xda, 0x50},
  {0xa2, 0x84, 0xce, 0x4e, 0x2e, 0x01, 0x25, 0xe0, 0x2a, 0x80, 0xde, 0x6d, 0x48, 0x53, 0x68, 0x44},
  {0x3f, 0x55, 0xc7, 0x55, 0xcd, 0x83, 0xe5, 0xca, 0xaf, 0x19, 0x8c, 0x4d, 0x03, 0x69, 0x4e, 0x2e}
};
// Use this line for a breakout or shield with an I2C connection:
Adafruit_PN532 nfc(PN532_IRQ, PN532_RESET);

void setup(void) {
  Serial.begin(115200);
  Serial.println("Hello!");

  nfc.begin();

  uint32_t versiondata = nfc.getFirmwareVersion();
  if (! versiondata) {
    Serial.print("Didn't find PN53x board");
    while (1); // halt
  }
  // Got ok data, print it out!
  Serial.print("Found chip PN5"); Serial.println((versiondata >> 24) & 0xFF, DEC);
  Serial.print("Firmware ver. "); Serial.print((versiondata >> 16) & 0xFF, DEC);
  Serial.print('.'); Serial.println((versiondata >> 8) & 0xFF, DEC);

  // configure board to read RFID tags
  nfc.SAMConfig();

  Serial.println("Waiting for an ISO14443A Card ...");
}


void loop(void) {
  delay(2500);
  uint8_t success;
  uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer to store the returned UID
  uint8_t uidLength;                        // Length of the UID (4 or 7 bytes depending on ISO14443A card type)
  // Wait for an ISO14443A type cards (Mifare, etc.).  When one is found
  // 'uid' will be populated with the UID, and uidLength will indicate
  success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);
  if (success) {
    // Display some basic information about the card
    Serial.println("Found an ISO14443A card");
    Serial.print("  UID Length: "); Serial.print(uidLength, DEC); Serial.println(" bytes");
    Serial.print("  UID Value: ");
    nfc.PrintHex(uid, uidLength);
    Serial.println("");
    if (uidLength == 4)
    {
      // We probably have a Mifare Classic card
      for (int dataBlock = 0, currentSector = 0; dataBlock < 32; dataBlock ++) {
        uint8_t keya[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
        currentSector++;
        Serial.println("Trying to authenticate block with default KEYA value");
        success = nfc.mifareclassic_AuthenticateBlock(uid, uidLength, blocksToWrite[dataBlock], 0, keya);
        if (!success) {
          success = nfc.mifareclassic_AuthenticateBlock(uid, uidLength, blocksToWrite[dataBlock], 1, keya);
        }
        if (success)
        {
          Serial.println("Sector has been authenticated");
        } else {
          Serial.println("Sector failed to authenticate, ensure that KEYA is 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF.");
          while (1) {};

        }
        uint8_t blockBytes[16];
        memcpy(blockBytes, cardData[dataBlock], sizeof cardData[dataBlock]  );
        success = nfc.mifareclassic_WriteDataBlock (blocksToWrite[dataBlock], blockBytes );

        if (success)
        {
          Serial.print("Wrote to Block "); Serial.println(blocksToWrite[dataBlock]);
          Serial.println("");
        }
        else
        {
          Serial.println("Unable to write to the requested block.  Ensure KEYA is 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF.");
        }
      }
    }
  }
  Serial.println("\n\nSend a character to run the writer again!");
  Serial.flush();
  while (!Serial.available());
  while (Serial.available()) {
    Serial.read();
  }
  Serial.flush();
}
